import {
  Controller,
  Get,
  Post,
  Param,
  Body,
  UseGuards,
  NotFoundException,
  ParseIntPipe,
  Query,
} from '@nestjs/common';
import {
  ApiTags,
  ApiBearerAuth,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBody,
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../../../auth/infrastructure/guards/jwt-auth.guard';
import { CompanyService } from '../../application/services/company.service';
import { CompanyWithCertificateDto } from '../../application/dto/company-with-certificate.dto';
import { CreateCompanyExternalDto } from '../../application/dto/create-company-external.dto';
import { ExternalCompanyResponseDto } from '../../application/dto/external-company-response.dto';
import { PaginationQueryDto } from '../../../common/dtos/pagination-query.dto';
import { PaginatedResponseDto } from '../../../common/dtos/paginated-response.dto';
import { CurrentUser } from '../../../auth/infrastructure/decorators/current-user.decorator';
import { User } from '../../../auth/domain/entities/user.entity';
import { CompanyFilterQueryDto } from '../../application/dto/company-filter-query.dto';

@ApiTags('Empresas')
@Controller('companies')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth()
export class CompanyController {
  constructor(private readonly companyService: CompanyService) {}

  @Get()
  @ApiOperation({
    summary: 'Listar compa√±√≠as con filtro de b√∫squeda general',
    description: `
      **üìã Obtiene una lista paginada de compa√±√≠as con filtro de b√∫squeda general.**
      
      ## üîê Control de Acceso por Roles:
      
      ### üëë **ADMIN** (Administrador del Sistema)
      - ‚úÖ **Acceso Universal**: Puede consultar todas las compa√±√≠as del sistema
      - üîì **Sin Restricciones**: No se limita por usuario asignado
      
      ### üë• **DEALER/USER** (Usuario Est√°ndar)
      - üîí **Acceso Limitado**: Solo compa√±√≠as asignadas a su usuario (\`company.soltec_user_id = usuario_actual\`)
      
      ## üîç Filtro Disponible:
      
      ### üìÑ **B√∫squeda General:**
      - **\`dato\`**: Busca en NIT o raz√≥n social (b√∫squeda parcial en ambos campos)
      
      ## üìÑ Paginaci√≥n y Ordenamiento:
      - **\`page\`**: N√∫mero de p√°gina (default: 1)
      - **\`limit\`**: Elementos por p√°gina (default: 10, m√°x: 100)
      - **\`sortBy\`**: Campo de ordenamiento (default: 'createdAt')
      - **\`sortOrder\`**: Direcci√≥n (\`ASC\`/\`DESC\`, default: 'DESC')
      
      ## üéØ Ejemplos de Uso:
      
      **Buscar por NIT:**
      \`GET /companies?dato=900123456\`
      
      **Buscar por raz√≥n social:**
      \`GET /companies?dato=tecnolog√≠a\`
      
      **Con paginaci√≥n:**
      \`GET /companies?dato=desarrollo&page=1&limit=5\`
    `,
  })
  @ApiQuery({
    name: 'dato',
    required: false,
    description: 'Filtrar por documento o nombre de la empresa',
    example: '900123456',
  })
  @ApiResponse({
    status: 200,
    description: 'Lista paginada de compa√±√≠as con filtros aplicados exitosamente',
    schema: {
      example: {
        data: [
          {
            id: 1,
            identificationNumber: '900123456',
            dv: '7',
            businessName: 'TECNOLOG√çA Y DESARROLLO S.A.S.',
            tradeName: 'TecnoDev',
            email: 'contacto@tecnodev.com',
            state: true,
            certificateExpirationDate: '2025-12-31T23:59:59Z',
            createdAt: '2024-01-15T10:30:00Z',
          },
        ],
        total: 1,
        page: 1,
        limit: 10,
        totalPages: 1,
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Par√°metros de filtro inv√°lidos',
    schema: {
      example: {
        statusCode: 400,
        message: ['page debe ser un n√∫mero positivo', 'limit no puede ser mayor a 100'],
        error: 'Bad Request',
      },
    },
  })
  async getCompanies(
    @Query() filterQuery: CompanyFilterQueryDto,
    @CurrentUser() currentUser: User,
  ): Promise<PaginatedResponseDto<CompanyWithCertificateDto>> {
    return this.companyService.getCompaniesByUserPaginated(
      currentUser,
      filterQuery,
    );
  }

  @Get(':id')
  @ApiOperation({
    summary: 'Obtener compa√±√≠a espec√≠fica con validaci√≥n de permisos por rol',
    description: `
      **üîç Consulta una compa√±√≠a espec√≠fica aplicando filtros de seguridad seg√∫n el rol:**
      
      ## üîê Control de Acceso por Roles:
      
      ### üëë **ADMIN** (Administrador del Sistema)
      - ‚úÖ **Acceso Universal**: Puede consultar cualquier compa√±√≠a del sistema
      - üîì **Sin Restricciones**: No se valida la asignaci√≥n de usuario
      - üåç **Vista Completa**: Acceso a toda la informaci√≥n empresarial
      
      ### üë• **DEALER/USER** (Usuario Est√°ndar)  
      - üîí **Acceso Limitado**: Solo compa√±√≠as asignadas a su usuario
      - ‚úã **Validaci√≥n Estricta**: Se verifica \`company.soltec_user_id = usuario_actual\`
      - üö´ **Error 404**: Si intenta acceder a compa√±√≠a no asignada
      
      ## üìä Informaci√≥n Incluida en la Respuesta:
      
      **üè¢ Datos Empresariales Completos:**
      - **Identificaci√≥n**: NIT, d√≠gito verificaci√≥n, raz√≥n social
      - **Ubicaci√≥n**: Direcci√≥n, municipio, tel√©fono, email
      - **Registro**: Matr√≠cula mercantil, fecha de creaci√≥n
      
      **üìú Configuraci√≥n Tributaria:**
      - **R√©gimen**: Tipo de r√©gimen tributario
      - **Responsabilidades**: Responsabilidades fiscales
      - **Ambiente DIAN**: Configuraci√≥n para facturaci√≥n electr√≥nica
      
      **üîê Integraci√≥n y Seguridad:**
      - **Certificado Digital**: Informaci√≥n del certificado P12
      - **Token DIAN**: Token API para servicios de la DIAN
      - **Configuraci√≥n SMTP**: Par√°metros de correo (si est√° configurado)
      
      **üë§ Gesti√≥n:**
      - **Usuario Asignado**: ID del usuario Soltec responsable
      - **Estado**: Activo/Inactivo de la empresa
      - **Permisos**: Configuraci√≥n de acceso para vendedores
    `,
  })
  @ApiParam({
    name: 'id',
    description: 'ID √∫nico de la compa√±√≠a a consultar',
    example: 1,
    schema: { type: 'integer', minimum: 1 },
  })
  @ApiResponse({
    status: 200,
    description: 'Compa√±√≠a encontrada con informaci√≥n completa del certificado y configuraci√≥n',
    type: CompanyWithCertificateDto,
    schema: {
      example: {
        id: 1,
        identificationNumber: '900123456',
        dv: '7',
        typeDocumentIdentificationId: 6,
        typeOrganizationId: 2,
        languageId: 79,
        taxId: 1,
        typeOperationId: 2,
        typeRegimeId: 2,
        typeLiabilityId: 14,
        municipalityId: 149,
        typeEnvironmentId: 1,
        address: 'Carrera 15 #93-47, Oficina 501',
        phone: '+57 1 123 4567',
        merchantRegistration: '12345678',
        state: true,
        allowSellerLogin: false,
        soltecUserId: 'user-uuid-123',
        createdAt: '2025-01-21T10:30:00Z',
        updatedAt: '2025-01-21T15:45:00Z',
        businessName: 'TECNOLOG√çA Y DESARROLLO S.A.S.',
        tradeName: 'TecnoDev',
        email: 'contacto@tecnodev.com',
        seze: 'SEZE123456',
        headNote: 'Gracias por su compra',
        footNote: 'Pol√≠tica de devoluciones disponible',
        typeDocumentIdentification: 'NIT',
        typeOrganization: 'Persona Jur√≠dica',
        typeLiability: 'Responsable de IVA',
        typeRegime: 'R√©gimen Com√∫n',
        municipality: 'Bogot√° D.C., Bogot√° D.C.',
        typeEnvironment: 'Producci√≥n',
        certificatePassword: '***',
        certificateExpirationDate: '2025-12-31T23:59:59Z',
        soltecUser: {
          name: 'Juan P√©rez',
          email: 'juan.perez@soltec.com'
        }
      },
    },
  })
  @ApiResponse({
    status: 404,
    description: 'Compa√±√≠a no encontrada o sin permisos de acceso',
    schema: {
      example: {
        statusCode: 404,
        message: 'Compa√±√≠a no encontrada',
        error: 'Not Found',
      },
    },
  })
  @ApiResponse({
    status: 401,
    description: 'No autorizado - Token JWT requerido',
    schema: {
      example: {
        statusCode: 401,
        message: 'Token JWT requerido para acceder a la compa√±√≠a',
        error: 'Unauthorized',
      },
    },
  })
  @ApiResponse({
    status: 403,
    description: 'Sin permisos para acceder a esta compa√±√≠a espec√≠fica',
    schema: {
      example: {
        statusCode: 403,
        message: 'No tiene permisos para acceder a esta compa√±√≠a',
        error: 'Forbidden',
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'ID de compa√±√≠a inv√°lido',
    schema: {
      example: {
        statusCode: 400,
        message: 'El ID debe ser un n√∫mero entero positivo',
        error: 'Bad Request',
      },
    },
  })
  async getCompanyById(
    @Param('id', ParseIntPipe) companyId: number,
    @CurrentUser() currentUser: User,
  ): Promise<CompanyWithCertificateDto> {
    const company = await this.companyService.getCompanyWithCertificateById(
      companyId,
      currentUser,
    );

    if (!company) {
      throw new NotFoundException('Compa√±√≠a no encontrada');
    }

    return company;
  }

  @Get('by-nit/:nit')
  @ApiOperation({
    summary: 'Buscar compa√±√≠a por NIT con control de acceso por roles',
    description: `
      **üîç Busca una compa√±√≠a espec√≠fica por su NIT aplicando filtros de seguridad seg√∫n el rol:**
      
      ## üîê Control de Acceso por Roles:
      
      ### üëë **ADMIN** (Administrador del Sistema)
      - ‚úÖ **Acceso Universal**: Puede buscar cualquier compa√±√≠a por NIT en todo el sistema
      - üîì **Sin Restricciones**: No se valida la asignaci√≥n de usuario
      - üåç **Vista Completa**: Acceso a toda la informaci√≥n empresarial
      
      ### üë• **DEALER/USER** (Usuario Est√°ndar)  
      - üîí **Acceso Limitado**: Solo puede buscar compa√±√≠as asignadas a su usuario
      - ‚úã **Validaci√≥n Estricta**: Se verifica \`company.soltec_user_id = usuario_actual\`
      - üö´ **Error 404**: Si el NIT no corresponde a una compa√±√≠a asignada al usuario
      
      ## üéØ Casos de Uso:
      
      **üìã Validaci√≥n de NIT:**
      - Verificar si una compa√±√≠a existe en el sistema antes de crear documentos
      - Obtener informaci√≥n completa de una empresa para integraci√≥n con ERPs
      
      **üîÑ Integraci√≥n con Sistemas Externos:**
      - APIs de terceros que necesitan consultar compa√±√≠as por NIT
      - Servicios de validaci√≥n de datos empresariales
      
      **üìä Reportes y Consultas:**
      - Generar reportes espec√≠ficos por empresa
      - Consultas r√°pidas para soporte t√©cnico
      
      ## üìã Formato del NIT:
      - **Sin d√≠gito verificador**: Solo n√∫meros del NIT
      - **Ejemplo v√°lido**: \`900123456\`
      - **Se elimina autom√°ticamente**: Espacios en blanco al inicio y final
    `,
  })
  @ApiParam({
    name: 'nit',
    description: 'NIT de la compa√±√≠a a buscar (sin d√≠gito verificador)',
    example: '900123456',
    schema: { type: 'string', pattern: '^[0-9]+$' },
  })
  @ApiResponse({
    status: 200,
    description: 'Compa√±√≠a encontrada exitosamente con informaci√≥n completa',
    type: CompanyWithCertificateDto,
    schema: {
      example: {
        id: 1,
        identificationNumber: '900123456',
        dv: '7',
        businessName: 'TECNOLOG√çA Y DESARROLLO S.A.S.',
        tradeName: 'TecnoDev',
        email: 'contacto@tecnodev.com',
        phone: '+57 1 123 4567',
        address: 'Carrera 15 #93-47, Oficina 501',
        merchantRegistration: '12345678',
        state: true,
        allowSellerLogin: false,
        soltecUserId: 'user-uuid-123',
        typeDocumentIdentificationId: 6,
        typeOrganizationId: 2,
        typeLiabilityId: 14,
        typeRegimeId: 2,
        municipalityId: 149,
        typeEnvironmentId: 1,
        createdAt: '2025-01-21T10:30:00Z',
        updatedAt: '2025-01-21T15:45:00Z',
        typeDocumentIdentification: 'NIT',
        typeOrganization: 'Persona Jur√≠dica',
        typeLiability: 'Responsable de IVA',
        typeRegime: 'R√©gimen Com√∫n',
        municipality: 'Bogot√° D.C., Bogot√° D.C.',
        typeEnvironment: 'Producci√≥n',
        certificatePassword: '***',
        certificateExpirationDate: '2025-12-31T23:59:59Z',
        soltecUser: {
          name: 'Juan P√©rez',
          email: 'juan.perez@soltec.com'
        }
      },
    },
  })
  @ApiResponse({
    status: 404,
    description: 'Compa√±√≠a no encontrada con el NIT proporcionado o sin permisos de acceso',
    schema: {
      example: {
        statusCode: 404,
        message: 'No se encontr√≥ una compa√±√≠a con el NIT: 900123456',
        error: 'Not Found',
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'NIT inv√°lido o vac√≠o',
    schema: {
      example: {
        statusCode: 400,
        message: 'El NIT es requerido y debe contener solo n√∫meros',
        error: 'Bad Request',
      },
    },
  })
  async getCompanyByNit(
    @Param('nit') nit: string,
    @CurrentUser() currentUser: User,
  ): Promise<CompanyWithCertificateDto> {
    // Validaci√≥n del formato del NIT
    if (!nit || !nit.trim()) {
      throw new NotFoundException('El NIT es requerido');
    }

    // Validar que el NIT contenga solo n√∫meros
    const nitPattern = /^[0-9]+$/;
    if (!nitPattern.test(nit.trim())) {
      throw new NotFoundException('El NIT debe contener solo n√∫meros');
    }

    try {
      const company = await this.companyService.getCompanyByNit(nit, currentUser);

      if (!company) {
        throw new NotFoundException(`No se encontr√≥ una compa√±√≠a con el NIT: ${nit}`);
      }

      return company;
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      
      throw new NotFoundException(`Error al buscar compa√±√≠a con NIT ${nit}: ${error.message}`);
    }
  }

  @Post('')
  @ApiOperation({
    summary: 'Crear nueva compa√±√≠a en servicio externo de la DIAN',
    description: `
      **Registra una nueva empresa en el servicio externo de la DIAN y la guarda localmente.**
      
      Este endpoint realiza las siguientes operaciones:
      1. Valida los datos de entrada seg√∫n las reglas de la DIAN
      2. Env√≠a la informaci√≥n al servicio externo configurado (EXTERNAL_SERVER_URL)
      3. Si la creaci√≥n es exitosa, guarda la compa√±√≠a en la base de datos local
      4. Asocia la compa√±√≠a al usuario autenticado actual
      5. Retorna la informaci√≥n completa de la compa√±√≠a con su certificado
      
      **Notas importantes:**
      - El NIT debe ser v√°lido y no estar registrado previamente
      - Todos los IDs de cat√°logos deben corresponder a valores v√°lidos en la DIAN
      - El correo electr√≥nico debe ser √∫nico en el sistema
      - La matr√≠cula mercantil debe ser v√°lida y activa
      
      **Proceso de validaci√≥n:**
      - Verificaci√≥n de formato del NIT y d√≠gito de verificaci√≥n
      - Validaci√≥n de existencia de c√≥digos en cat√°logos DIAN
      - Verificaci√≥n de unicidad de NIT y correo electr√≥nico
      - Validaci√≥n de datos obligatorios seg√∫n normativa DIAN
    `,
  })
  @ApiBody({
    type: CreateCompanyExternalDto,
    description: 'Datos de la compa√±√≠a a registrar en el servicio externo',
    examples: {
      'empresa-ejemplo': {
        summary: 'Ejemplo de empresa S.A.S',
        description: 'Datos t√≠picos para registrar una empresa del sector privado',
        value: {
          nit: '900123456',
          digito: '7',
          type_document_identification_id: 6,
          type_organization_id: 2,
          type_regime_id: 2,
          type_liability_id: 14,
          business_name: 'TECNOLOG√çA Y DESARROLLO S.A.S.',
          merchant_registration: '12345678',
          municipality_id: 149,
          address: 'Carrera 15 #93-47, Oficina 501',
          phone: '+57 1 123 4567',
          email: 'contacto@tecnodesarrollo.com',
        },
      },
      'empresa-retail': {
        summary: 'Ejemplo de empresa comercial',
        description: 'Datos para una empresa del sector comercial/retail',
        value: {
          nit: '800987654',
          digito: '3',
          type_document_identification_id: 6,
          type_organization_id: 1,
          type_regime_id: 1,
          type_liability_id: 14,
          business_name: 'COMERCIALIZADORA DEL CARIBE LTDA',
          merchant_registration: '87654321',
          municipality_id: 149,
          address: 'Calle 72 #10-34, Local 102',
          phone: '+57 5 987 6543',
          email: 'info@comercaribe.co',
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description: 'Compa√±√≠a creada exitosamente en el servicio externo y registrada localmente',
    type: CompanyWithCertificateDto,
    schema: {
      example: {
        id: 15,
        identificationNumber: '900123456',
        dv: '7',
        typeDocumentIdentificationId: 6,
        typeOrganizationId: 2,
        languageId: 79,
        taxId: 1,
        typeOperationId: 2,
        typeRegimeId: 2,
        typeLiabilityId: 14,
        municipalityId: 149,
        typeEnvironmentId: 1,
        payrollTypeEnvironmentId: 1,
        eqdocsTypeEnvironmentId: 1,
        address: 'Carrera 15 #93-47, Oficina 501',
        phone: '+57 1 123 4567',
        merchantRegistration: '12345678',
        state: true,
        allowSellerLogin: false,
        soltecUserId: 'user-uuid-here',
        createdAt: '2025-01-21T15:30:00Z',
        updatedAt: '2025-01-21T15:30:00Z',
        certificateExpirationDate: '2026-01-21T23:59:59Z',
        certificateId: 8,
        certificateName: 'certificado_900123456.p12',
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Datos de entrada inv√°lidos o empresa ya registrada',
    schema: {
      example: {
        statusCode: 400,
        message: [
          'El NIT debe contener solo n√∫meros',
          'El correo electr√≥nico debe ser √∫nico',
          'La matr√≠cula mercantil no es v√°lida',
        ],
        error: 'Bad Request',
      },
    },
  })
  @ApiResponse({
    status: 401,
    description: 'Token de autenticaci√≥n requerido o inv√°lido',
    schema: {
      example: {
        statusCode: 401,
        message: 'Token JWT requerido',
        error: 'Unauthorized',
      },
    },
  })
  @ApiResponse({
    status: 403,
    description: 'Sin permisos para crear compa√±√≠as',
    schema: {
      example: {
        statusCode: 403,
        message: 'No tiene permisos para crear empresas',
        error: 'Forbidden',
      },
    },
  })
  @ApiResponse({
    status: 409,
    description: 'Conflicto - NIT o email ya existe en el sistema',
    schema: {
      example: {
        statusCode: 409,
        message: 'Ya existe una empresa con este NIT: 900123456',
        error: 'Conflict',
      },
    },
  })
  @ApiResponse({
    status: 422,
    description: 'Error de validaci√≥n en el servicio externo de la DIAN',
    schema: {
      example: {
        statusCode: 422,
        message: 'Error de validaci√≥n en servicio DIAN',
        error: 'Unprocessable Entity',
        details: {
          nit: 'NIT ya registrado en la DIAN',
          municipality_id: 'C√≥digo de municipio inv√°lido',
        },
      },
    },
  })
  @ApiResponse({
    status: 500,
    description: 'Error interno del servidor o falla en comunicaci√≥n con servicio externo',
    schema: {
      example: {
        statusCode: 500,
        message: 'Error al comunicarse con el servicio externo de la DIAN',
        error: 'Internal Server Error',
      },
    },
  })
  @ApiResponse({
    status: 503,
    description: 'Servicio externo de la DIAN no disponible',
    schema: {
      example: {
        statusCode: 503,
        message: 'Servicio externo temporalmente no disponible',
        error: 'Service Unavailable',
      },
    },
  })
  async createExternalCompany(
    @Body() companyData: CreateCompanyExternalDto,
    @CurrentUser() currentUser: User,
  ): Promise<CompanyWithCertificateDto> {
    return this.companyService.createCompanyInExternalService(
      companyData,
      currentUser,
    );
  }
}
